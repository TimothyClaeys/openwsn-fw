import os
import distutils.sysconfig

Import('env')

localEnv = env.Clone()

sources_h = [
    'board.h',
    'cryptoengine.h',
    'debugpins.h',
    'eui64.h',
    'leds.h',
    'radio.h',
    'uart.h',
    'sctimer.h',
    os.path.join('common', 'openccms.h'),
    os.path.join('common', 'openaes.h'),
    os.path.join('common', 'mbedtls/aes.h'),
    os.path.join('common', 'mbedtls/asn1.h'),
    os.path.join('common', 'mbedtls/asn1write.h'),
    os.path.join('common', 'mbedtls/base64.h'),
    os.path.join('common', 'mbedtls/bignum.h'),
    os.path.join('common', 'mbedtls/bn_mul.h'),
    os.path.join('common', 'mbedtls/ccm.h'),
    os.path.join('common', 'mbedtls/certs.h'),
    os.path.join('common', 'mbedtls/check_config.h'),
    os.path.join('common', 'mbedtls/cipher.h'),
    os.path.join('common', 'mbedtls/cipher_internal.h'),
    os.path.join('common', 'mbedtls/config.h'),
    os.path.join('common', 'mbedtls/cmac.h'),
    os.path.join('common', 'mbedtls/ctr_drbg.h'),
    os.path.join('common', 'mbedtls/ecdh.h'),
    os.path.join('common', 'mbedtls/ecdsa.h'),
    os.path.join('common', 'mbedtls/ecp.h'),
    os.path.join('common', 'mbedtls/ecp_internal.h'),
    os.path.join('common', 'mbedtls/entropy.h'),
    os.path.join('common', 'mbedtls/entropy_poll.h'),
    os.path.join('common', 'mbedtls/gcm.h'),
    os.path.join('common', 'mbedtls/md.h'),
    os.path.join('common', 'mbedtls/md_internal.h'),
    os.path.join('common', 'mbedtls/memory_buffer_alloc.h'),
    os.path.join('common', 'mbedtls/net_sockets.h'),
    os.path.join('common', 'mbedtls/oid.h'),
    os.path.join('common', 'mbedtls/pem.h'),
    os.path.join('common', 'mbedtls/pk.h'),
    os.path.join('common', 'mbedtls/pk_internal.h'),
    os.path.join('common', 'mbedtls/pkcs11.h'),
    os.path.join('common', 'mbedtls/pkcs12.h'),
    os.path.join('common', 'mbedtls/pkcs5.h'),
    os.path.join('common', 'mbedtls/platform.h'),
    os.path.join('common', 'mbedtls/platform_time.h'),
    os.path.join('common', 'mbedtls/rsa.h'),
    os.path.join('common', 'mbedtls/rsa_internal.h'),
    os.path.join('common', 'mbedtls/sha1.h'),
    os.path.join('common', 'mbedtls/sha256.h'),
    os.path.join('common', 'mbedtls/sha512.h'),
    os.path.join('common', 'mbedtls/ssl.h'),
    os.path.join('common', 'mbedtls/ssl_ciphersuites.h'),
    os.path.join('common', 'mbedtls/ssl_internal.h'),
    os.path.join('common', 'mbedtls/threading.h'),
    os.path.join('common', 'mbedtls/timing.h'),
    os.path.join('common', 'mbedtls/x509.h'),
    os.path.join('common', 'mbedtls/x509_crt.h'),
]

sources_c = [
    os.path.join('common', 'openccms.c'),
    os.path.join('common', 'openaes.c'),
    os.path.join('common', 'aes.c'),
    os.path.join('common', 'asn1parse.c'),
    os.path.join('common', 'asn1write.c'),
    os.path.join('common', 'base64.c'),
    os.path.join('common', 'bignum.c'),
    os.path.join('common', 'ccm.c'),
    os.path.join('common', 'certs.c'),
    os.path.join('common', 'cipher.c'),
    os.path.join('common', 'cipher_wrap.c'),
    os.path.join('common', 'cmac.c'),
    os.path.join('common', 'ctr_drbg.c'),
    os.path.join('common', 'ecdh.c'),
    os.path.join('common', 'ecdsa.c'),
    os.path.join('common', 'ecp.c'),
    os.path.join('common', 'ecp_curves.c'),
    os.path.join('common', 'entropy.c'),
    os.path.join('common', 'entropy_poll.c'),
    os.path.join('common', 'gcm.c'),
    os.path.join('common', 'md.c'),
    os.path.join('common', 'md_wrap.c'),
    os.path.join('common', 'memory_buffer_alloc.c'),
    os.path.join('common', 'net_sockets.c'),
    os.path.join('common', 'oid.c'),
    os.path.join('common', 'pem.c'),
    os.path.join('common', 'pk.c'),
    os.path.join('common', 'pk_wrap.c'),
    os.path.join('common', 'pkcs11.c'),
    os.path.join('common', 'pkcs12.c'),
    os.path.join('common', 'pkcs5.c'),
    os.path.join('common', 'pkparse.c'),
    os.path.join('common', 'platform.c'),
    os.path.join('common', 'rsa.c'),
    os.path.join('common', 'rsa_internal.c'),
    os.path.join('common', 'sha1.c'),
    os.path.join('common', 'sha256.c'),
    os.path.join('common', 'sha512.c'),
    os.path.join('common', 'ssl_ciphersuites.c'),
    os.path.join('common', 'ssl_tls.c'),
    os.path.join('common', 'ssl_cli.c'),
    os.path.join('common', 'ssl_srv.c'),
    os.path.join('common', 'x509.c'),
    os.path.join('common', 'x509_crt.c'),
]

target = 'libbsp'

#============================ SCons targets ===================================

if localEnv['board']=='python':
    
    actions = []
    
    for s in sources_c+sources_h:
        action = localEnv.Objectify(
            target = localEnv.ObjectifiedFilename(s),
            source = s,
        )
        actions += [action]
        
    Alias('objectifybspheaders', actions)
    
    common = [localEnv.ObjectifiedFilename(s) for s in sources_c]
    
else:
    common = sources_c
    
common = localEnv.Object(source=common)
        
if env['toolchain']!='iar-proj':
        
    board = localEnv.SConscript(
        os.path.join('#','bsp','boards',localEnv['board'],'SConscript'),
        variant_dir = localEnv['board'],
        exports     = {'env': env},
    )

    libbsp = localEnv.Library(
        target = target,
        source = [board,common],
    )
    Alias(target, libbsp)
